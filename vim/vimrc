" filetype off
set encoding=UTF-8

set shiftwidth=2 " Avoid huge Vim's default tabs, use 4 to indent
let &softtabstop= &shiftwidth
set expandtab " Convert tabs to spaces

set wildmenu " Command-line completion enhaced mode

" I must see the lines!!
set number
" Render whitespaces :)
" set listchars=tab:>-,extends:>,precedes:<,space:.
" set list
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
if has('nvim')
  Plugin 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plugin 'Shougo/deoplete.nvim'
  Plugin 'roxma/nvim-yarp'
  Plugin 'roxma/vim-hug-neovim-rpc'
endif
Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/nerdtree'
Plugin 'xuyuanp/nerdtree-git-plugin'
Plugin 'vim-airline/vim-airline'
" Plugin 'scrooloose/nerdcommenter'
Plugin 'Yggdroot/indentLine'
Plugin 'yuezk/vim-js'
Plugin 'maxmellon/vim-jsx-pretty'
Plugin 'dense-analysis/ale'
Plugin 'ryanoasis/vim-devicons'
Plugin 'dracula/vim', {'name': 'dracula'}
Plugin 'tpope/vim-surround'
Plugin 'jiangmiao/auto-pairs'
call vundle#end()

" Start deoplete
let g:deoplete#enable_at_startup = 1

" Filetype detection, filetype options detection, auto-indent detection
filetype plugin indent on

" Identation
set autoindent

" Enable Vim's syntax highlighting
syntax enable

" Allows to edit another file even if we haven't saved current file's changes
set hidden

" Open NERDTree after init
autocmd vimenter * NERDTree
" Show hidden files
let NERDTreeShowHidden=1

" Autosave folds
autocmd BufWinLeave *.* mkview!
autocmd BufWinEnter *.* silent loadview

" Define mapleader key
let mapleader = ","

" Highly experimental ( Might break something :( )
" I'll start mapping some useful keybinds to use (Neo)Vim as my main editor
" for everything I do

" Toggle NERDTree
nnoremap <silent> <Leader>nt :NERDTreeToggle<CR>
" Refresh NERDTree
nnoremap <silent> <Leader>nr :NERDTreeRefreshRoot<CR>
" Remove search highlight
nnoremap <silent> <Leader>us :noh<CR>

" Cycle between open buffers
nnoremap <leader>l :ls<CR>:b<space>

" Vim has some built-ins plugins!!!
packadd! matchit

" Work with tabs
nnoremap <silent> <Leader>n :tabNew<CR>
nnoremap <silent> <Leader>] :tabnext<CR>
nnoremap <silent> <Leader>[ :tabprevious<CR>

" Navigate between ALE's errors
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" .vimrc reload withing .vimrc
nnoremap <silent> <Leader>rf :w\|:source %<CR>
" .vimrc reload outside .vimrc
nnoremap <silent> <Leader>rc :w\|:source ~/.vimrc<CR>

" Search options
set ignorecase " Make search insensitive to case
set smartcase " But smart enough to find both ocurrences :)
set incsearch " Highlight matching search

set statusline=%{FugitiveStatusline()}

" vim-arline plugin will handle linting errors
let g:airline#extensions#ale#enabled = 1

" Vim-fugitive's
set statusline=%{FugitiveStatusline()}

" Set coloring?
syntax enable

" Set colorscheme
colorscheme dracula

" ALE configs
"
" For all files, remove trailing lines & whitespaces
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\}
let g:ale_sign_error = '✕'
let g:ale_sign_warning = '•'
" Activate Fix on save
let g:ale_fix_on_save= 1
