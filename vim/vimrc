" filetype off
set encoding=UTF-8

set shiftwidth=2 " Avoid huge Vim's default tabs, use 4 to indent
let &softtabstop= &shiftwidth
set expandtab " Convert tabs to spaces

set wildmenu " Command-line completion enhaced mode

" Enable italics inside vim
highlight Comment cterm=italic

" I must see the lines!!
set number
" Render whitespaces :)
" set listchars=tab:>-,extends:>,precedes:<,space:.
set list
set rtp^=~/.vim/bundle/ctrlp.vim

call plug#begin('~/.vim/plugged')
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
Plug 'jparise/vim-graphql'
Plug 'tpope/vim-fugitive'
Plug 'scrooloose/nerdtree'
Plug 'xuyuanp/nerdtree-git-plugin'
Plug 'vim-airline/vim-airline'
Plug 'Yggdroot/indentLine'
Plug 'dense-analysis/ale'
Plug 'ryanoasis/vim-devicons'
Plug 'dracula/vim', {'name': 'dracula'}
Plug 'tpope/vim-surround'
Plug 'jiangmiao/auto-pairs'
Plug 'rust-lang/rust.vim'
Plug 'ekalinin/Dockerfile.vim'
call plug#end()

" Filetype detection, filetype options detection, auto-indent detection
filetype plugin indent on

" Identation
set autoindent

" Enable Vim's syntax highlighting
syntax enable

" Allows to edit another file even if we haven't saved current file's changes
set hidden

" Open NERDTree after init
autocmd vimenter * NERDTree
" Show hidden files
let NERDTreeShowHidden=1

" Define mapleader key
let mapleader = " "

" CtrlP configs
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

let g:ctrlp_working_path_mode = 'ra'

" Toggle NERDTree
nnoremap <silent> <Leader>nt :NERDTreeToggle<CR>
" Refresh NERDTree
nnoremap <silent> <Leader>nr :NERDTreeRefreshRoot<CR>
" Remove search highlight
nnoremap <silent> <Leader>us :noh<CR>

" Split vertically|horizontally
nnoremap <silent> <leader>w/ :vs<CR>
nnoremap <silent> <leader>w- :split<CR>

" Cycle between open buffers
nnoremap <leader>l :ls<CR>:b<space>

" Vim has some built-ins plugins!!!
packadd! matchit

" Navigate between ALE's errors
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" .vimrc reload withing .vimrc
nnoremap <silent> <Leader>rf :w\|:source %<CR>
" .vimrc reload outside .vimrc
nnoremap <silent> <Leader>rc :w\|:source ~/.vimrc<CR>

" Search options
set ignorecase " Make search insensitive to case
set smartcase " But smart enough to find both ocurrences :)
set incsearch " Highlight matching search

set statusline=%{FugitiveStatusline()}

" Vim-fugitive's
set statusline=%{FugitiveStatusline()}

" Set coloring?
syntax enable

" Set colorscheme
colorscheme dracula

set wildignore+=*/node_modules/*,/.git/

" Needed for YATS
set re=0

" ALE configs
"
" For all files, remove trailing lines & whitespaces
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\}
let g:ale_sign_error = '✕'
let g:ale_sign_warning = '•'
" Activate Fix on save
let g:ale_fix_on_save= 1
